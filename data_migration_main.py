import mysql.connector
import pandas as pd
import os
from sqlalchemy import create_engine
import time
import logging

class DatabaseMigrator:
    def __init__(self, source_config, target_master_config):
        """
        Kh·ªüi t·∫°o migrator v·ªõi c·∫•u h√¨nh database ngu·ªìn v√† database ƒë√≠ch
        
        :param source_config: Dict ch·ª©a th√¥ng tin k·∫øt n·ªëi database ngu·ªìn
        :param target_master_config: Dict ch·ª©a th√¥ng tin k·∫øt n·ªëi database master ƒë√≠ch
        """
        self.source_config = source_config
        self.target_master_config = target_master_config
        
        # C·∫•u h√¨nh logging
        logging.basicConfig(
            level=logging.INFO, 
            format='%(asctime)s - %(levelname)s: %(message)s'
        )
        self.logger = logging.getLogger(__name__)

    def _get_source_connection(self):
        """T·∫°o k·∫øt n·ªëi ƒë·∫øn database ngu·ªìn"""

        
        try:
            connection = mysql.connector.connect(
                host=self.source_config['host'],
                port=self.source_config['port'],
                user=self.source_config['user'],
                password=self.source_config['password'],
                database=self.source_config['database']
            )
            return connection
        except Exception as e:
            self.logger.error(f"L·ªói k·∫øt n·ªëi database ngu·ªìn: {e}")
            raise

    def _get_target_connection(self):
        """T·∫°o k·∫øt n·ªëi ƒë·∫øn database master ƒë√≠ch"""
        try:
            connection = mysql.connector.connect(
                host=self.target_master_config['host'],
                port=self.target_master_config['port'],
                user=self.target_master_config['user'],
                password=self.target_master_config['password']
            )
            return connection
        except Exception as e:
            self.logger.error(f"L·ªói k·∫øt n·ªëi database ƒë√≠ch: {e}")
            raise

    def get_all_tables(self, connection):
        """
        L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b·∫£ng trong database
        
        :param connection: K·∫øt n·ªëi database
        :return: Danh s√°ch t√™n b·∫£ng
        """
        cursor = connection.cursor()
        cursor.execute("SHOW TABLES")
        tables = [table[0] for table in cursor.fetchall()]
        cursor.close()
        return tables

    def migrate_schema(self, source_db, target_db):
        """
        Copy schema c·ªßa c√°c b·∫£ng t·ª´ database ngu·ªìn sang database ƒë√≠ch
        
        :param source_db: T√™n database ngu·ªìn
        :param target_db: T√™n database ƒë√≠ch
        """
        source_conn = self._get_source_connection()
        target_conn = self._get_target_connection()
        
        source_cursor = source_conn.cursor(dictionary=True)
        target_cursor = target_conn.cursor()

        try:
            # T·∫°o database ƒë√≠ch n·∫øu ch∆∞a t·ªìn t·∫°i
            target_cursor.execute(f"CREATE DATABASE IF NOT EXISTS {target_db}")
            target_cursor.execute(f"USE {target_db}")

            # L·∫•y danh s√°ch b·∫£ng
            source_cursor.execute(f"USE {source_db}")
            tables = self.get_all_tables(source_conn)

            for table in tables:
                # L·∫•y c·∫•u tr√∫c b·∫£ng
                source_cursor.execute(f"SHOW CREATE TABLE {table}")
                create_table_stmt = source_cursor.fetchone()['Create Table']

                # Th·ª±c thi c√¢u l·ªánh t·∫°o b·∫£ng tr√™n database ƒë√≠ch
                target_cursor.execute(create_table_stmt)
                self.logger.info(f"‚úÖ ƒê√£ copy schema cho b·∫£ng: {table}")

            target_conn.commit()
        except Exception as e:
            self.logger.error(f"L·ªói migrate schema: {e}")
            target_conn.rollback()
        finally:
            source_cursor.close()
            target_cursor.close()
            source_conn.close()
            target_conn.close()

    def migrate_data(self, source_db, target_db, chunk_size=10000):
        """
        Di chuy·ªÉn d·ªØ li·ªáu t·ª´ng ph·∫ßn ƒë·ªÉ tr√°nh overload
        
        :param source_db: T√™n database ngu·ªìn
        :param target_db: T√™n database ƒë√≠ch
        :param chunk_size: S·ªë l∆∞·ª£ng b·∫£n ghi di chuy·ªÉn m·ªói l·∫ßn
        """
        # T·∫°o SQLAlchemy engine ƒë·ªÉ h·ªó tr·ª£ migrate d·ªØ li·ªáu hi·ªáu qu·∫£
        source_engine = create_engine(
            f"mysql+mysqlconnector://{self.source_config['user']}:{self.source_config['password']}@{self.source_config['host']}:{self.source_config['port']}/{source_db}"
        )
        target_engine = create_engine(
            f"mysql+mysqlconnector://{self.target_master_config['user']}:{self.target_master_config['password']}@{self.target_master_config['host']}:{self.target_master_config['port']}/{target_db}"
        )

        try:
            # L·∫•y danh s√°ch b·∫£ng
            source_conn = source_engine.connect()
            tables = self.get_all_tables(source_engine.raw_connection())

            for table in tables:
                self.logger.info(f"üöÄ B·∫Øt ƒë·∫ßu migrate b·∫£ng: {table}")
                
                # ƒê·∫øm t·ªïng s·ªë b·∫£n ghi ƒë·ªÉ chia chunk
                count_query = f"SELECT COUNT(*) as total FROM {table}"
                total_records = pd.read_sql(count_query, source_engine).iloc[0]['total']
                
                start_time = time.time()
                
                # Migrate t·ª´ng chunk
                for offset in range(0, total_records, chunk_size):
                    query = f"SELECT * FROM {table} LIMIT {chunk_size} OFFSET {offset}"
                    df = pd.read_sql(query, source_engine)
                    
                    # Ghi v√†o database ƒë√≠ch
                    df.to_sql(table, target_engine, if_exists='append', index=False)
                
                end_time = time.time()
                self.logger.info(f"‚úÖ Ho√†n th√†nh migrate b·∫£ng {table}: {total_records} b·∫£n ghi, {end_time - start_time:.2f} gi√¢y")

        except Exception as e:
            self.logger.error(f"L·ªói migrate d·ªØ li·ªáu: {e}")
        finally:
            source_conn.close()

def main():
    # C·∫•u h√¨nh database ngu·ªìn (thay ƒë·ªïi theo m√¥i tr∆∞·ªùng c·ªßa b·∫°n)
    source_config = {
        'host': 'localhost',
        'port': 3306,
        'user': 'root',
        'password': '123456',
        'database': 'sample_migration_db'
    }

    # C·∫•u h√¨nh database master ƒë√≠ch (s·ª≠ d·ª•ng c·∫•u h√¨nh t·ª´ docker-compose)
    target_master_config = {
        'host': 'localhost',
        'port': 3308,  
        'user': 'root',
        'password': '123456'
    }

    # T√™n database ngu·ªìn v√† ƒë√≠ch
    source_db = 'sample_migration_db'
    target_db = 'migrated_database'

    migrator = DatabaseMigrator(source_config, target_master_config)
    
    print("üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh migration...")
    
    # Migrate schema tr∆∞·ªõc
    migrator.migrate_schema(source_db, target_db)
    
    # Migrate d·ªØ li·ªáu
    migrator.migrate_data(source_db, target_db)
    
    print("‚úÖ Migration ho√†n t·∫•t!")

if __name__ == "__main__":
    main()